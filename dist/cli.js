"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _blessed = _interopRequireDefault(require("blessed"));

var _detectSong = _interopRequireDefault(require("./detect-song"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var keys = {
  VOLUME_DOWN: 'left',
  VOLUME_UP: 'right',
  GET_CURRENT_SONG: 'C-a',
  EXIT: 'C-c'
};

var init = function init(lofiStream) {
  var screen = _blessed["default"].screen({
    smartCSR: true,
    grabKeys: true
  });

  screen.on('keypress', onKeyPress(screen, lofiStream));
  screen.title = 'lofi-cli';

  var header = _blessed["default"].box({
    top: 'center',
    left: 'center',
    width: '70%',
    height: '70%',
    tags: true,
    border: {
      type: 'line'
    },
    style: {
      fg: 'white',
      bg: 'magenta',
      border: {
        fg: '#f0f0f0'
      },
      hover: {
        bg: 'green'
      }
    }
  });

  var title = _blessed["default"].text({
    left: 'center',
    tags: true,
    content: '{bold}LOFI{/bold}',
    align: 'center'
  });

  header.append(title);
  screen.append(header);
  screen.render();
  return screen;
};

var onKeyPress = function onKeyPress(cli, lofiStream) {
  return function (ch, key) {
    var offset = 0.1;

    switch (key.full) {
      case keys.VOLUME_DOWN:
        if (lofiStream.volume.volume - offset >= 0) lofiStream.volume.setVolume(lofiStream.volume.volume - 0.1);
        break;

      case keys.VOLUME_UP:
        if (lofiStream.volume.volume + offset <= 1) lofiStream.volume.setVolume(lofiStream.volume.volume + 0.1);
        break;

      case keys.GET_CURRENT_SONG:
        (0, _detectSong["default"])().then(function (song) {
          return console.log("Current song: ".concat(song));
        });
        break;

      case keys.EXIT:
        process.exit(1);
    } // cli.progressBar.update(lofiStream.volume.volume)

  };
};

var _default = init;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGkuanMiXSwibmFtZXMiOlsia2V5cyIsIlZPTFVNRV9ET1dOIiwiVk9MVU1FX1VQIiwiR0VUX0NVUlJFTlRfU09ORyIsIkVYSVQiLCJpbml0IiwibG9maVN0cmVhbSIsInNjcmVlbiIsImJsZXNzZWQiLCJzbWFydENTUiIsImdyYWJLZXlzIiwib24iLCJvbktleVByZXNzIiwidGl0bGUiLCJoZWFkZXIiLCJib3giLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJ0YWdzIiwiYm9yZGVyIiwidHlwZSIsInN0eWxlIiwiZmciLCJiZyIsImhvdmVyIiwidGV4dCIsImNvbnRlbnQiLCJhbGlnbiIsImFwcGVuZCIsInJlbmRlciIsImNsaSIsImNoIiwia2V5Iiwib2Zmc2V0IiwiZnVsbCIsInZvbHVtZSIsInNldFZvbHVtZSIsInRoZW4iLCJzb25nIiwiY29uc29sZSIsImxvZyIsInByb2Nlc3MiLCJleGl0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxJQUFJLEdBQUc7QUFDVEMsRUFBQUEsV0FBVyxFQUFFLE1BREo7QUFFVEMsRUFBQUEsU0FBUyxFQUFFLE9BRkY7QUFHVEMsRUFBQUEsZ0JBQWdCLEVBQUUsS0FIVDtBQUlUQyxFQUFBQSxJQUFJLEVBQUU7QUFKRyxDQUFiOztBQU9BLElBQU1DLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQUFDLFVBQVUsRUFBSTtBQUN2QixNQUFNQyxNQUFNLEdBQUdDLG9CQUFRRCxNQUFSLENBQWU7QUFDMUJFLElBQUFBLFFBQVEsRUFBRSxJQURnQjtBQUUxQkMsSUFBQUEsUUFBUSxFQUFFO0FBRmdCLEdBQWYsQ0FBZjs7QUFJQUgsRUFBQUEsTUFBTSxDQUFDSSxFQUFQLENBQVUsVUFBVixFQUFzQkMsVUFBVSxDQUFDTCxNQUFELEVBQVNELFVBQVQsQ0FBaEM7QUFDQUMsRUFBQUEsTUFBTSxDQUFDTSxLQUFQLEdBQWUsVUFBZjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdOLG9CQUFRTyxHQUFSLENBQVk7QUFDdkJDLElBQUFBLEdBQUcsRUFBRSxRQURrQjtBQUV2QkMsSUFBQUEsSUFBSSxFQUFFLFFBRmlCO0FBR3ZCQyxJQUFBQSxLQUFLLEVBQUUsS0FIZ0I7QUFJdkJDLElBQUFBLE1BQU0sRUFBRSxLQUplO0FBS3ZCQyxJQUFBQSxJQUFJLEVBQUUsSUFMaUI7QUFNdkJDLElBQUFBLE1BQU0sRUFBRTtBQUNKQyxNQUFBQSxJQUFJLEVBQUU7QUFERixLQU5lO0FBU3ZCQyxJQUFBQSxLQUFLLEVBQUU7QUFDSEMsTUFBQUEsRUFBRSxFQUFFLE9BREQ7QUFFSEMsTUFBQUEsRUFBRSxFQUFFLFNBRkQ7QUFHSEosTUFBQUEsTUFBTSxFQUFFO0FBQ0pHLFFBQUFBLEVBQUUsRUFBRTtBQURBLE9BSEw7QUFNSEUsTUFBQUEsS0FBSyxFQUFFO0FBQ0hELFFBQUFBLEVBQUUsRUFBRTtBQUREO0FBTko7QUFUZ0IsR0FBWixDQUFmOztBQW9CQSxNQUFNWixLQUFLLEdBQUdMLG9CQUFRbUIsSUFBUixDQUFhO0FBQ3ZCVixJQUFBQSxJQUFJLEVBQUUsUUFEaUI7QUFFdkJHLElBQUFBLElBQUksRUFBRSxJQUZpQjtBQUd2QlEsSUFBQUEsT0FBTyxFQUFFLG1CQUhjO0FBSXZCQyxJQUFBQSxLQUFLLEVBQUU7QUFKZ0IsR0FBYixDQUFkOztBQU9BZixFQUFBQSxNQUFNLENBQUNnQixNQUFQLENBQWNqQixLQUFkO0FBQ0FOLEVBQUFBLE1BQU0sQ0FBQ3VCLE1BQVAsQ0FBY2hCLE1BQWQ7QUFDQVAsRUFBQUEsTUFBTSxDQUFDd0IsTUFBUDtBQUVBLFNBQU94QixNQUFQO0FBQ0gsQ0F2Q0Q7O0FBeUNBLElBQU1LLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNvQixHQUFELEVBQU0xQixVQUFOO0FBQUEsU0FBcUIsVUFBQzJCLEVBQUQsRUFBS0MsR0FBTCxFQUFhO0FBQ2pELFFBQU1DLE1BQU0sR0FBRyxHQUFmOztBQUNBLFlBQVFELEdBQUcsQ0FBQ0UsSUFBWjtBQUNBLFdBQUtwQyxJQUFJLENBQUNDLFdBQVY7QUFDSSxZQUFJSyxVQUFVLENBQUMrQixNQUFYLENBQWtCQSxNQUFsQixHQUEyQkYsTUFBM0IsSUFBcUMsQ0FBekMsRUFBNEM3QixVQUFVLENBQUMrQixNQUFYLENBQWtCQyxTQUFsQixDQUE0QmhDLFVBQVUsQ0FBQytCLE1BQVgsQ0FBa0JBLE1BQWxCLEdBQTJCLEdBQXZEO0FBQzVDOztBQUNKLFdBQUtyQyxJQUFJLENBQUNFLFNBQVY7QUFDSSxZQUFJSSxVQUFVLENBQUMrQixNQUFYLENBQWtCQSxNQUFsQixHQUEyQkYsTUFBM0IsSUFBcUMsQ0FBekMsRUFBNEM3QixVQUFVLENBQUMrQixNQUFYLENBQWtCQyxTQUFsQixDQUE0QmhDLFVBQVUsQ0FBQytCLE1BQVgsQ0FBa0JBLE1BQWxCLEdBQTJCLEdBQXZEO0FBQzVDOztBQUNKLFdBQUtyQyxJQUFJLENBQUNHLGdCQUFWO0FBQ0ksc0NBQWFvQyxJQUFiLENBQWtCLFVBQUFDLElBQUk7QUFBQSxpQkFBSUMsT0FBTyxDQUFDQyxHQUFSLHlCQUE2QkYsSUFBN0IsRUFBSjtBQUFBLFNBQXRCO0FBQ0E7O0FBQ0osV0FBS3hDLElBQUksQ0FBQ0ksSUFBVjtBQUNJdUMsUUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYjtBQVhKLEtBRmlELENBZWpEOztBQUNILEdBaEJrQjtBQUFBLENBQW5COztlQWtCZXZDLEkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmxlc3NlZCBmcm9tICdibGVzc2VkJ1xuaW1wb3J0IGRldGVjdFNvbmcgZnJvbSAnLi9kZXRlY3Qtc29uZydcblxuY29uc3Qga2V5cyA9IHtcbiAgICBWT0xVTUVfRE9XTjogJ2xlZnQnLFxuICAgIFZPTFVNRV9VUDogJ3JpZ2h0JyxcbiAgICBHRVRfQ1VSUkVOVF9TT05HOiAnQy1hJyxcbiAgICBFWElUOiAnQy1jJ1xufVxuXG5jb25zdCBpbml0ID0gbG9maVN0cmVhbSA9PiB7XG4gICAgY29uc3Qgc2NyZWVuID0gYmxlc3NlZC5zY3JlZW4oe1xuICAgICAgICBzbWFydENTUjogdHJ1ZSxcbiAgICAgICAgZ3JhYktleXM6IHRydWVcbiAgICB9KVxuICAgIHNjcmVlbi5vbigna2V5cHJlc3MnLCBvbktleVByZXNzKHNjcmVlbiwgbG9maVN0cmVhbSkpXG4gICAgc2NyZWVuLnRpdGxlID0gJ2xvZmktY2xpJ1xuICAgIGNvbnN0IGhlYWRlciA9IGJsZXNzZWQuYm94KHtcbiAgICAgICAgdG9wOiAnY2VudGVyJyxcbiAgICAgICAgbGVmdDogJ2NlbnRlcicsXG4gICAgICAgIHdpZHRoOiAnNzAlJyxcbiAgICAgICAgaGVpZ2h0OiAnNzAlJyxcbiAgICAgICAgdGFnczogdHJ1ZSxcbiAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICB0eXBlOiAnbGluZSdcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGZnOiAnd2hpdGUnLFxuICAgICAgICAgICAgYmc6ICdtYWdlbnRhJyxcbiAgICAgICAgICAgIGJvcmRlcjoge1xuICAgICAgICAgICAgICAgIGZnOiAnI2YwZjBmMCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgIGJnOiAnZ3JlZW4nXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxuICAgIGNvbnN0IHRpdGxlID0gYmxlc3NlZC50ZXh0KHtcbiAgICAgICAgbGVmdDogJ2NlbnRlcicsXG4gICAgICAgIHRhZ3M6IHRydWUsXG4gICAgICAgIGNvbnRlbnQ6ICd7Ym9sZH1MT0ZJey9ib2xkfScsXG4gICAgICAgIGFsaWduOiAnY2VudGVyJ1xuICAgIH0pXG5cbiAgICBoZWFkZXIuYXBwZW5kKHRpdGxlKVxuICAgIHNjcmVlbi5hcHBlbmQoaGVhZGVyKVxuICAgIHNjcmVlbi5yZW5kZXIoKVxuXG4gICAgcmV0dXJuIHNjcmVlblxufVxuXG5jb25zdCBvbktleVByZXNzID0gKGNsaSwgbG9maVN0cmVhbSkgPT4gKGNoLCBrZXkpID0+IHtcbiAgICBjb25zdCBvZmZzZXQgPSAwLjFcbiAgICBzd2l0Y2ggKGtleS5mdWxsKSB7XG4gICAgY2FzZSBrZXlzLlZPTFVNRV9ET1dOOlxuICAgICAgICBpZiAobG9maVN0cmVhbS52b2x1bWUudm9sdW1lIC0gb2Zmc2V0ID49IDApIGxvZmlTdHJlYW0udm9sdW1lLnNldFZvbHVtZShsb2ZpU3RyZWFtLnZvbHVtZS52b2x1bWUgLSAwLjEpXG4gICAgICAgIGJyZWFrXG4gICAgY2FzZSBrZXlzLlZPTFVNRV9VUDpcbiAgICAgICAgaWYgKGxvZmlTdHJlYW0udm9sdW1lLnZvbHVtZSArIG9mZnNldCA8PSAxKSBsb2ZpU3RyZWFtLnZvbHVtZS5zZXRWb2x1bWUobG9maVN0cmVhbS52b2x1bWUudm9sdW1lICsgMC4xKVxuICAgICAgICBicmVha1xuICAgIGNhc2Uga2V5cy5HRVRfQ1VSUkVOVF9TT05HOlxuICAgICAgICBkZXRlY3RTb25nKCkudGhlbihzb25nID0+IGNvbnNvbGUubG9nKGBDdXJyZW50IHNvbmc6ICR7c29uZ31gKSlcbiAgICAgICAgYnJlYWtcbiAgICBjYXNlIGtleXMuRVhJVDpcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpXG4gICAgfVxuICAgIC8vIGNsaS5wcm9ncmVzc0Jhci51cGRhdGUobG9maVN0cmVhbS52b2x1bWUudm9sdW1lKVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0XG4iXX0=